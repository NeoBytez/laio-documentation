"use strict";(self.webpackChunklaio_documentation=self.webpackChunklaio_documentation||[]).push([[355],{2361:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>o});var n=t(4848),r=t(8453);const i={},l="Stat",c={id:"Laio/common/Library/Stat",title:"Stat",description:"Overview",source:"@site/docs/Laio/common/Library/Stat.md",sourceDirName:"Laio/common/Library",slug:"/Laio/common/Library/Stat",permalink:"/Laio/common/Library/Stat",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Stamina",permalink:"/Laio/common/Library/Stamina"},next:{title:"Notify",permalink:"/Laio/common/Library/Weight"}},s={},o=[{value:"Overview",id:"overview",level:2},{value:"Constructors",id:"constructors",level:2},{value:"Events",id:"events",level:2},{value:"Public Methods",id:"public-methods",level:2},{value:"Stat Data",id:"stat-data",level:2},{value:"Example",id:"example",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"stat",children:"Stat"})}),"\n",(0,n.jsx)(a.h2,{id:"overview",children:"Overview"}),"\n",(0,n.jsx)(a.p,{children:"A generic stat implementation, allow a float to regenerate, drain, have a min and max. Perfect for quick interations and prototyping"}),"\n",(0,n.jsx)(a.h2,{id:"constructors",children:"Constructors"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"public Stat(StatData statData)\n"})}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"public Stat(float current, float maximum, float regenerateRate, float drainRate, float min = 0)\n"})}),"\n",(0,n.jsx)(a.h2,{id:"events",children:"Events"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"public onStatEmpty;\n"})}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"public onStatFull;\n"})}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"public onStatUpdate;\n"})}),"\n",(0,n.jsx)(a.h2,{id:"public-methods",children:"Public Methods"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"public StatData GetStatData()\n"})}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"public virtual void Drain()\n"})}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"public virtual void Adjust(float amount)\n"})}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"public virtual void Regenerate()\n"})}),"\n",(0,n.jsx)(a.h2,{id:"stat-data",children:"Stat Data"}),"\n",(0,n.jsx)(a.p,{children:"The stat data is a container to store stat data in."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"public struct StatData\r\n{\r\n    public float current;\r\n    public float minimum;\r\n    public float maximum;\r\n    public float regenerateRate;\r\n    public float drainRate;\r\n\r\n    public StatData(float current, float minimum, float maximum, float regenerateRate, float drainRate)\r\n    {\r\n        this.current = current;\r\n        this.minimum = minimum;\r\n        this.maximum = maximum;\r\n        this.regenerateRate = regenerateRate;\r\n        this.drainRate = drainRate;\r\n    }\r\n}\n"})}),"\n",(0,n.jsx)(a.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(a.p,{children:"A basic example of this would be using it for health."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-csharp",children:"\r\n//Set stat data inside inspector\r\n[SerializedField] private StatData _healthData;\r\n\r\nprivate Stat _health;\r\n\r\nprivate void Awake()\r\n{\r\n    //Load stat based on stat data on awake\r\n    _health = new StatData(_healthData);\r\n\r\n    //Assign delegates\r\n    _health.onEmpty += OnDeath;\r\n    _health.onUpdate += UIManager.HealthBarUpdate;\r\n}\r\n\r\nprivate void OnDeath() {}\r\n\r\nprivate void Update()\r\n{\r\n    //Health regeneration\r\n    _health.Regenerate();\r\n}\r\n\r\npublic void OnTakeDamage(float damage) => _health.Adjust(-damage);\r\n\n"})})]})}function h(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>l,x:()=>c});var n=t(6540);const r={},i=n.createContext(r);function l(e){const a=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);